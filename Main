from fastapi import FastAPI
from fastapi.responses import HTMLResponse
import csv, difflib, re
from typing import Optional

app = FastAPI(title = "Smart Vehicle Data Validation")

#load database
db = []
with open("vehicle_master.csv", newline = "", encoding = "utf-8") as f:
    reader = csv.DictReader(f)
    for row in reader:
        db.append(
            {
                "brand" : row["brand"],
                "model" : row["model"],
                "year_start" : int(row["year_start"]),
                "year_end" : int(row["year_end"])
            }
        )

@app.get("/", response_class = HTMLResponse)
def home():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Smart Vehicle Validator</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            input { margin: 10px 0; padding: 8px; width: 250px; }
            .suggestion { color: red; font-size: 14px; }
            .valid { color: green; font-size: 14px; }
        </style>
    </head>
    <body>
        <h2>Smart Vehicle Data Validator</h2>

        <label>Brand:</label><br>
        <input type="text" id="brand" oninput="validateInputs()"><br>
        <span id="brandMsg"></span><br>

        <label>Model:</label><br>
        <input type="text" id="model" oninput="validateInputs()"><br>
        <span id="modelMsg"></span><br>

        <label>Year:</label><br>
        <input type="number" id="year" oninput="validateInputs()"><br>
        <span id="yearMsg"></span><br>

        <label>Plate:</label><br>
        <input type="text" id="plate" placeholder="ABC 1234" oninput="validateInputs()"><br>
        <span id="plateMsg"></span><br>

        <script>
            let timer;
            async function validateInputs() {
                clearTimeout(timer);
                timer = setTimeout(async () => {
                    const brand = document.getElementById("brand").value;
                    const model = document.getElementById("model").value;
                    const year = document.getElementById("year").value;
                    const plate = document.getElementById("plate").value;

                    try {
                        const res = await fetch(`/validate?brand=${encodeURIComponent(brand)}&model=${encodeURIComponent(model)}&year=${encodeURIComponent(year)}&plate=${encodeURIComponent(plate)}`);
                        const data = await res.json();

                        // Reset messages
                        document.getElementById("brandMsg").innerText = "";
                        document.getElementById("modelMsg").innerText = "";
                        document.getElementById("yearMsg").innerText = "";
                        document.getElementById("plateMsg").innerText = "";

                        if (typeof data.suggestions === "string") {
                            // all good
                            document.getElementById("brandMsg").innerText = data.suggestions;
                            document.getElementById("brandMsg").className = "valid";
                        } else {
                            if (data.suggestions.brand) {
                                document.getElementById("brandMsg").innerText = data.suggestions.brand;
                                document.getElementById("brandMsg").className = "suggestion";
                            }
                            if (data.suggestions.model) {
                                document.getElementById("modelMsg").innerText = data.suggestions.model;
                                document.getElementById("modelMsg").className = "suggestion";
                            }
                            if (data.suggestions.year) {
                                document.getElementById("yearMsg").innerText = data.suggestions.year;
                                document.getElementById("yearMsg").className = "suggestion";
                            }
                            if (data.suggestions.plate) {
                                document.getElementById("plateMsg").innerText = data.suggestions.plate;
                                document.getElementById("plateMsg").className = "suggestion";
                            }
                        }
                    } catch (err) {
                        console.error("Validation error:", err);
                    }
                }, 100); // wait 300ms after user stops typing
            }
        </script>
    </body>
    </html>
    """


@app.get("/validate")
def validate(
    brand : Optional[str] = None,
    model : Optional[str] = None,
    year : Optional[int] = None,
    plate : Optional[str] = None
):
    suggestions = {}

    #validate brand
    if brand:
      brands = list({r["brand"] for r in db})
      closest_brand = difflib.get_close_matches(brand.lower(), [b.lower() for b in brands], n=1, cutoff=0.7)
      if closest_brand:
        real_brand = next(b for b in brands if b.lower() == closest_brand[0])
        # If case mismatch only → auto-correct silently
        if real_brand.lower() == brand.lower() and real_brand != brand:
            brand = real_brand
        # If actual typo → suggest correction
        elif real_brand.lower() != brand.lower():
            suggestions["brand"] = f"Did you mean '{real_brand}'?"
      else:
        suggestions["brand"] = "Unknown brand"

    #validate model
    if model:
      models_for_brand = [r["model"] for r in db if r["brand"].lower() == brand.lower()]

      if models_for_brand:
        closest_model = difflib.get_close_matches(model.lower(), [m.lower() for m in models_for_brand], n=1, cutoff=0.7)
        if closest_model:
            real_model = next(m for m in models_for_brand if m.lower() == closest_model[0])
            if real_model.lower() == model.lower() and real_model != model:
                model = real_model  # fix case only
            elif real_model.lower() != model.lower():
                suggestions["model"] = f"Did you mean '{real_model}'?"
        else:
            # Model not found in this brand → check other brands
            all_models = [(r["brand"], r["model"]) for r in db]
            matches = [(b, m) for b, m in all_models if m.lower() == model.lower()]
            if matches:
                # Example: Civic exists under Honda
                suggestions["model"] = f"'{model}' exists under {', '.join([f'{b} {m}' for b,m in matches])}"
            else:
                suggestions["model"] = f"Unknown model for brand '{brand}'"
      else:
        suggestions["model"] = "Cannot validate model until brand is valid"

    #validate year
    if year:
      brand_valid = any(r["brand"].lower() == brand.lower() for r in db)
      model_valid = any(r["model"].lower() == model.lower() and r["brand"].lower() == brand.lower() for r in db)

      if brand_valid and model_valid:
        # Find year range for this brand+model
        valid_range = None
        for r in db:
            if r["brand"].lower() == brand.lower() and r["model"].lower() == model.lower():
                valid_range = (r["year_start"], r["year_end"])
                break

        if valid_range and not (valid_range[0] <= year <= valid_range[1]):
            suggestions["year"] = f"Invalid year. Allowed: {valid_range[0]}–{valid_range[1]}"
      else:
        suggestions["year"] = "Year cannot be validated because brand/model is invalid"

    #validate plate
    if plate:
      pattern = r"^[A-Z]{1,3}\s?[0-9]{1,4}$"
      if not re.match(pattern, plate):
        suggestions["plate"] = "Plate format invalid. Example: ABC 1234"

    return{
        "input": {"brand" : brand, "model" : model, "year" : year, "plate" : plate},
        "suggestions" : suggestions or "All valid input"
    }
